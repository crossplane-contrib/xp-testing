package vendored

import (
	appsv1 "k8s.io/api/apps/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/api/apps/v1"
)

// ObjectMeta is metadata contains the configurable metadata fields for the
// runtime objects.
type ObjectMeta struct {
	// Name is the name of the object.
	// +optional
	Name *string `json:"name,omitempty"`
	// Annotations is an unstructured key value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: http:https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	// +optional
	Annotations map[string]string `json:"annotations,omitempty"`

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. Labels will be merged with internal labels
	// used by crossplane, and labels with a crossplane.io key might be
	// overwritten.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	// +optional
	Labels map[string]string `json:"labels,omitempty"`
}

// DeploymentTemplate is the template for the Deployment object.
type DeploymentTemplate struct {
	// Metadata contains the configurable metadata fields for the Deployment.
	// +optional
	Metadata *ObjectMeta `json:"metadata,omitempty"`

	// Spec contains the configurable spec fields for the Deployment object.
	// +optional
	Spec *appsv1.DeploymentSpec `json:"spec,omitempty"`
}

// ServiceTemplate is the template for the Service object.
type ServiceTemplate struct {
	// Metadata contains the configurable metadata fields for the Service.
	// +optional
	Metadata *ObjectMeta `json:"metadata,omitempty"`
}

// ServiceAccountTemplate is the template for the ServiceAccount object.
type ServiceAccountTemplate struct {
	// Metadata contains the configurable metadata fields for the ServiceAccount.
	// +optional
	Metadata *ObjectMeta `json:"metadata,omitempty"`
}

// DeploymentRuntimeConfigSpec specifies the configuration for a packaged controller.
// Values provided will override package manager defaults. Labels and
// annotations are passed to both the controller Deployment and ServiceAccount.
type DeploymentRuntimeConfigSpec struct {
	// DeploymentTemplate is the template for the Deployment object.
	// +optional
	DeploymentTemplate *DeploymentTemplate `json:"deploymentTemplate,omitempty"`
	// ServiceTemplate is the template for the Service object.
	// +optional
	ServiceTemplate *ServiceTemplate `json:"serviceTemplate,omitempty"`
	// ServiceAccountTemplate is the template for the ServiceAccount object.
	// +optional
	ServiceAccountTemplate *ServiceAccountTemplate `json:"serviceAccountTemplate,omitempty"`
}

// The DeploymentRuntimeConfig provides settings for the Kubernetes Deployment
// of a Provider or composition function package.
//
// Read the Crossplane documentation for
// [more information about DeploymentRuntimeConfigs](https://docs.crossplane.io/latest/concepts/providers/#runtime-configuration).
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane}
type DeploymentRuntimeConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec DeploymentRuntimeConfigSpec `json:"spec,omitempty"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectMeta) DeepCopyInto(out *ObjectMeta) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentTemplate) DeepCopyInto(out *DeploymentTemplate) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = new(ObjectMeta)
		(*in).DeepCopyInto(*out)
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = new(v1.DeploymentSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceTemplate) DeepCopyInto(out *ServiceTemplate) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = new(ObjectMeta)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceAccountTemplate) DeepCopyInto(out *ServiceAccountTemplate) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = new(ObjectMeta)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentRuntimeConfigSpec) DeepCopyInto(out *DeploymentRuntimeConfigSpec) {
	*out = *in
	if in.DeploymentTemplate != nil {
		in, out := &in.DeploymentTemplate, &out.DeploymentTemplate
		*out = new(DeploymentTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceTemplate != nil {
		in, out := &in.ServiceTemplate, &out.ServiceTemplate
		*out = new(ServiceTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountTemplate != nil {
		in, out := &in.ServiceAccountTemplate, &out.ServiceAccountTemplate
		*out = new(ServiceAccountTemplate)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentRuntimeConfig) DeepCopyInto(out *DeploymentRuntimeConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentRuntimeConfig.
func (in *DeploymentRuntimeConfig) DeepCopy() *DeploymentRuntimeConfig {
	if in == nil {
		return nil
	}
	out := new(DeploymentRuntimeConfig)
	in.DeepCopyInto(out)
	return out
}
